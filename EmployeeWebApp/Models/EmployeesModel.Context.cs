//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeWebApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Data.Sql;
    using System.Data.Entity.SqlServer;
    
    public partial class RandomEntities : DbContext
    {
        public RandomEntities()
            : base("name=RandomEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeEncrypt> EmployeeEncrypts { get; set; }
    
        public virtual int spEmployeeDelete(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeDelete", employeeIDParameter);
        }
    
        public virtual int spEmployeeInsert(string name, string position, string department, string address, Nullable<decimal> annualSalary)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var annualSalaryParameter = annualSalary.HasValue ?
                new ObjectParameter("AnnualSalary", annualSalary) :
                new ObjectParameter("AnnualSalary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeInsert", nameParameter, positionParameter, departmentParameter, addressParameter, annualSalaryParameter);
        }
    
        public virtual int spEmployeeUpdate(Nullable<int> employeeID, string name, string position, string department, string address, Nullable<decimal> annualSalary)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var annualSalaryParameter = annualSalary.HasValue ?
                new ObjectParameter("AnnualSalary", annualSalary) :
                new ObjectParameter("AnnualSalary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeUpdate", employeeIDParameter, nameParameter, positionParameter, departmentParameter, addressParameter, annualSalaryParameter);
        }
    
        public virtual int spEmployeeEncryptUpdate(Nullable<int> employeeID, string name, string position, string department, string address, Nullable<decimal> annualSalary, string sSN)
        {
            int returnValue = 0;

            SqlConnection sCon = new SqlConnection(this.Database.Connection.ConnectionString.ToString());

            using (SqlCommand Cmd = new SqlCommand("dbo.spEmployeeEncryptUpdate", sCon)) 
            {
                Cmd.CommandType = System.Data.CommandType.StoredProcedure;

                var employeeIDParameter = employeeID.HasValue ?
                    new SqlParameter("EmployeeID", employeeID) :
                    new SqlParameter("EmployeeID", typeof(int));

                var nameParameter = name != null ?
                    new SqlParameter("Name", name) :
                    new SqlParameter("Name", typeof(string));

                var positionParameter = position != null ?
                    new SqlParameter("Position", position) :
                    new SqlParameter("Position", typeof(string));

                var departmentParameter = department != null ?
                    new SqlParameter("Department", department) :
                    new SqlParameter("Department", typeof(string));

                var addressParameter = address != null ?
                    new SqlParameter("Address", address) :
                    new SqlParameter("Address", typeof(string));

                var annualSalaryParameter = annualSalary.HasValue ?
                    new SqlParameter("AnnualSalary", annualSalary) :
                    new SqlParameter("AnnualSalary", typeof(decimal));

                SqlParameter sSNParameter = new SqlParameter("SSN", System.Data.SqlDbType.Char, 12);
                sSNParameter.Value = sSN;

                Cmd.Parameters.Add(employeeIDParameter);
                Cmd.Parameters.Add(nameParameter);
                Cmd.Parameters.Add(positionParameter);
                Cmd.Parameters.Add(departmentParameter);
                Cmd.Parameters.Add(addressParameter);
                Cmd.Parameters.Add(annualSalaryParameter);
                Cmd.Parameters.Add(sSNParameter);

                sCon.Open();
                returnValue = Cmd.ExecuteNonQuery();
                sCon.Close();

            }

            return returnValue;
        }
    }
}
